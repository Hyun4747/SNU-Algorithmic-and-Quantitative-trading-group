name: Deploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: deploy
    runs-on: ubuntu-latest

    env:
      IMAGE_TAG: latest
      ECR_REPOSITORY: chartrider
      AWS_PROFILE_NAME: chartrider-cicd

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to ECR
        id: build-image
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: SCP docker-compose.yaml to remote
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.REMOTE_HOST }}
          port: ${{ secrets.REMOTE_PORT }}
          username: ${{ secrets.REMOTE_USERNAME }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          passphrase: ${{ secrets.REMOTE_SSH_PASSPHRASE }}
          source: "docker-compose.yaml"
          target: "~"

      - name: SSH into Remote Server and Run Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          port: ${{ secrets.REMOTE_PORT }}
          username: ${{ secrets.REMOTE_USERNAME }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          passphrase: ${{ secrets.REMOTE_SSH_PASSPHRASE }}
          script: |
            aws ecr get-login-password --profile ${{ env.AWS_PROFILE_NAME }} | docker login -u AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }} docker-compose -f ~/docker-compose.yaml up -d --no-recreate rabbitmq postgres autoheal
            TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }} docker-compose -f ~/docker-compose.yaml up -d telegram worker migration-job
            rm -rf ~/.docker/config.json
